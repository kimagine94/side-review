name: Deploy to Amazon EC2

on:
  push:
    branches:
      - feature/backend-main

# 본인이 설정한 값을 여기서 채워넣습니다.
# 리전, 버킷 이름, CodeDeploy 앱 이름, CodeDeploy 배포 그룹 이름
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: side-review-bucket
  CODE_DEPLOY_APPLICATION_NAME: uwhoo-code-deploy
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: code-deploy-group
permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    # (1) 기본 체크아웃
    - name: Checkout
      uses: actions/checkout@v3

    - name: chmod
      run: chmod -R +x ./.github

    - name: Generate .env file from Github Secrets
      run: |
          touch .env
          echo "${{ secrets.ENV_DEPLOY }}" > .env
          cat .env

    - name: Debug - Check if .env was created
      run: |
          if [[ -f .env ]]; then
            echo ".env exists!";
          else
            echo ".env does not exist!";
          fi

    - name: Make Zip File
      run: |
        ls -l .env
        zip -qq -r ./$GITHUB_SHA.zip .env 
        unzip -l ./$GITHUB_SHA.zip
      shell: bash

    # (2) JDK 11 세팅
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'
    # (3) Key store 변환
    - name: Generate Keystore file from Github Secrets
      run: |
        echo "$KEYSTORE" > ./keystore/keystore.b64
        base64 -d -i ./keystore/keystore.b64 > BE/keystore.p12
      env:
        KEYSTORE: ${{ secrets.APP_KEYSTORE_BASE64 }}
        
    # (4) Gradle build (Test 제외)
    - name: Build with Gradle
      uses: /gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
      with:
        gradle-version: 8.2.1
      #  arguments: clean build -x test
        
    - name: Run a Gradle build with Gradle Enterprise injection enabled
      run: |
        cd BE
        chmod +x gradlew
        ./gradlew clean build -x test
      
    # (5) AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

     # (4-1) update appspec.yml(appspec.yml 파일에 있는 set-env-prod.sh를 set-env-beta.sh로 변경)
    # - name: Update appspec.yml for main
    #   if: github.ref == 'refs/heads/main'
    #   run: |
    #     sed -i 's/set-env-beta.sh/set-env-prod.sh/g' appspec.yml

    # - name: Update appspec.yml for develop
    #   if: github.ref == 'refs/heads/develop'
    #   run: |
        # sed -i 's/set-env-prod.sh/set-env-beta.sh/g' appspec.yml
        

    # (6) 빌드 결과물을 S3 버킷에 업로드
    - name: Upload to AWS S3
      run: |
        aws deploy push \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
          --source .

    # (7) S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
    - name: Deploy to AWS EC2 from S3
      run: |
        aws deploy create-deployment \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
          --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip
